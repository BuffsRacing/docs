{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CU Boulder Racing Team The fastest team at CU Boulder This documentation covers the telemetry and streaming setup for the endurance division.","title":"Home"},{"location":"#cu-boulder-racing-team","text":"The fastest team at CU Boulder This documentation covers the telemetry and streaming setup for the endurance division.","title":"CU Boulder Racing Team"},{"location":"visualisation/","text":"Visualisation Logging During the race, the Pi-4 has a web-server that can be used to read logs from the telemetry and streaming software. An alternative for viewing logs from the mobile app might be implemented in the future. Streaming With both the app and the Pi, we have configured it to stream to twitch. We are in the process of setting up an official Twitch channel, but in the meanwhile during races the stream can be accessed at https://twitch.tv/prudentwish Telemetry We use the free hosted instance of Grafana for our dashboard. The data is sent to the Graphite server and then visualised using our template. The dashboard has an option to choose which car the data needs to be shown for. The dashboard currently shows the following data: GPS Race Stats Twitch Stream OBD-II Data","title":"Visualisation"},{"location":"visualisation/#visualisation","text":"","title":"Visualisation"},{"location":"visualisation/#logging","text":"During the race, the Pi-4 has a web-server that can be used to read logs from the telemetry and streaming software. An alternative for viewing logs from the mobile app might be implemented in the future.","title":"Logging"},{"location":"visualisation/#streaming","text":"With both the app and the Pi, we have configured it to stream to twitch. We are in the process of setting up an official Twitch channel, but in the meanwhile during races the stream can be accessed at https://twitch.tv/prudentwish","title":"Streaming"},{"location":"visualisation/#telemetry","text":"We use the free hosted instance of Grafana for our dashboard. The data is sent to the Graphite server and then visualised using our template. The dashboard has an option to choose which car the data needs to be shown for. The dashboard currently shows the following data: GPS Race Stats Twitch Stream OBD-II Data","title":"Telemetry"},{"location":"hardware/","text":"Hardware ESP32 ESP32-CAM RTSP / Save to Disk RTSP Streamer Starts mDNS responder and can be accessed via ralphiecam-00.local . Every camera that is added, automatically increments that number. Save to Disk Saves video to SD-Card at full HD resolution Raspberry Pi Raspberry Pi 4 To run the Python program Raspberry Pi Zero W API Server Android/iOS Smartphone To run the mobile app","title":"Hardware"},{"location":"hardware/#hardware","text":"","title":"Hardware"},{"location":"hardware/#esp32","text":"","title":"ESP32"},{"location":"hardware/#esp32-cam","text":"RTSP / Save to Disk","title":"ESP32-CAM"},{"location":"hardware/#rtsp-streamer","text":"Starts mDNS responder and can be accessed via ralphiecam-00.local . Every camera that is added, automatically increments that number.","title":"RTSP Streamer"},{"location":"hardware/#save-to-disk","text":"Saves video to SD-Card at full HD resolution","title":"Save to Disk"},{"location":"hardware/#raspberry-pi","text":"","title":"Raspberry Pi"},{"location":"hardware/#raspberry-pi-4","text":"To run the Python program","title":"Raspberry Pi 4"},{"location":"hardware/#raspberry-pi-zero-w","text":"API Server","title":"Raspberry Pi Zero W"},{"location":"hardware/#androidios-smartphone","text":"To run the mobile app","title":"Android/iOS Smartphone"},{"location":"telemtry_and_streaming/","text":"Telemetry and Streaming Our telemetry system is deployed via two methods: A mobile app built using React Native A Raspberry Pi 4 (Although, it can be deployed on any Linux powered SBC) Modules and Documentation: Streaming FFMPEG Commands and Information - LINK Mobile App - LINK Python App - LINK","title":"Telemetry and Streaming"},{"location":"telemtry_and_streaming/#telemetry-and-streaming","text":"Our telemetry system is deployed via two methods: A mobile app built using React Native A Raspberry Pi 4 (Although, it can be deployed on any Linux powered SBC) Modules and Documentation: Streaming FFMPEG Commands and Information - LINK Mobile App - LINK Python App - LINK","title":"Telemetry and Streaming"},{"location":"telemtry_and_streaming/ffmpeg/","text":"FFMPEG Configurations React Native To test if FFMPEG is correctly installed, you can use this command to perform a test stream. ffmpeg -v verbose -t 05:00 -f lavfi -i testsrc -f lavfi -i testsrc -f lavfi -i testsrc -f lavfi -i testsrc -ar 44100 -r 30 -g 60 -keyint_min 60 -b:v 400000 -c:v libx264 -preset medium -bufsize 400k -maxrate 400k -f flv rtmp://YOUR_RTMP_URL Equivalent React Native Code: import { FFmpegKit,ReturnCode } from 'ffmpeg-kit-react-native'; FFmpegKit.execute(`-v verbose -t 05:00 -f lavfi -i testsrc -f lavfi -i testsrc -f lavfi -i testsrc -f lavfi -i testsrc -ar 44100 -r 30 -g 60 -keyint_min 60 -b:v 400000 -c:v libx264 -preset medium -bufsize 400k -maxrate 400k -f flv \"${rtmpURL}\"`).then(async (session) => { const returnCode = await session.getReturnCode(); if (ReturnCode.isSuccess(returnCode)) { // SUCCESS } else if (ReturnCode.isCancel(returnCode)) { // CANCEL } else { // ERROR } }); An iPhone 12, is able to stream 1280x720 normally on a stable WiFi connection, whereas a Google Pixel 3 streaming 640x480 is still a bit choppy. This could probably be improved by tweaking the ffmpeg command. Android The input device on Android is called android_camera . Sadly, FFMPEG on Android cannot use the microphone. Thus, if trying to set the RTMP URL to YouTube, -i anullsrc flag needs to be passed to add a silent audio. Otherwise, streaming to YouTube will silently fail. ffmpeg -f android_camera -video_size 640x480 -i discarded -r 30 -c:v libx264 -f flv \"YOUR_RTMP_URL\" The hardcoded resolution of 640x480 will be moved to a configurable option in the app. iOS The input device on iOS is called avfoundation . ffmpeg -f avfoundation -r 30 -video_size 1280x720 -pixel_format bgr0 -i 0:0 -vcodec h264_videotoolbox -vsync 2 -f flv \"YOUR_RTMP_URL\" The hardcoded resolution of 1280x720 will be moved to a configurable option in the app. Linux As of writing the script, Raspberry Pi OS (64 bit) was still in beta, and video4linux was not working properly in our testing. Thus, we tested this command on Raspbian OS, and are in the process of updating the Pi to RPi OS and updating the command. ffmpeg -f v4l2 -framerate 25 -video_size 640x480 -i /dev/video0 -c:v libx264 -b:v 700k -maxrate 700k -bufsize 700k -an -f flv rtmp://YOUR_RTMP_URL","title":"FFMPEG Configurations"},{"location":"telemtry_and_streaming/ffmpeg/#ffmpeg-configurations","text":"","title":"FFMPEG Configurations"},{"location":"telemtry_and_streaming/ffmpeg/#react-native","text":"To test if FFMPEG is correctly installed, you can use this command to perform a test stream. ffmpeg -v verbose -t 05:00 -f lavfi -i testsrc -f lavfi -i testsrc -f lavfi -i testsrc -f lavfi -i testsrc -ar 44100 -r 30 -g 60 -keyint_min 60 -b:v 400000 -c:v libx264 -preset medium -bufsize 400k -maxrate 400k -f flv rtmp://YOUR_RTMP_URL Equivalent React Native Code: import { FFmpegKit,ReturnCode } from 'ffmpeg-kit-react-native'; FFmpegKit.execute(`-v verbose -t 05:00 -f lavfi -i testsrc -f lavfi -i testsrc -f lavfi -i testsrc -f lavfi -i testsrc -ar 44100 -r 30 -g 60 -keyint_min 60 -b:v 400000 -c:v libx264 -preset medium -bufsize 400k -maxrate 400k -f flv \"${rtmpURL}\"`).then(async (session) => { const returnCode = await session.getReturnCode(); if (ReturnCode.isSuccess(returnCode)) { // SUCCESS } else if (ReturnCode.isCancel(returnCode)) { // CANCEL } else { // ERROR } }); An iPhone 12, is able to stream 1280x720 normally on a stable WiFi connection, whereas a Google Pixel 3 streaming 640x480 is still a bit choppy. This could probably be improved by tweaking the ffmpeg command.","title":"React Native"},{"location":"telemtry_and_streaming/ffmpeg/#android","text":"The input device on Android is called android_camera . Sadly, FFMPEG on Android cannot use the microphone. Thus, if trying to set the RTMP URL to YouTube, -i anullsrc flag needs to be passed to add a silent audio. Otherwise, streaming to YouTube will silently fail. ffmpeg -f android_camera -video_size 640x480 -i discarded -r 30 -c:v libx264 -f flv \"YOUR_RTMP_URL\" The hardcoded resolution of 640x480 will be moved to a configurable option in the app.","title":"Android"},{"location":"telemtry_and_streaming/ffmpeg/#ios","text":"The input device on iOS is called avfoundation . ffmpeg -f avfoundation -r 30 -video_size 1280x720 -pixel_format bgr0 -i 0:0 -vcodec h264_videotoolbox -vsync 2 -f flv \"YOUR_RTMP_URL\" The hardcoded resolution of 1280x720 will be moved to a configurable option in the app.","title":"iOS"},{"location":"telemtry_and_streaming/ffmpeg/#linux","text":"As of writing the script, Raspberry Pi OS (64 bit) was still in beta, and video4linux was not working properly in our testing. Thus, we tested this command on Raspbian OS, and are in the process of updating the Pi to RPi OS and updating the command. ffmpeg -f v4l2 -framerate 25 -video_size 640x480 -i /dev/video0 -c:v libx264 -b:v 700k -maxrate 700k -bufsize 700k -an -f flv rtmp://YOUR_RTMP_URL","title":"Linux"},{"location":"telemtry_and_streaming/mobile-app/","text":"Mobile App The app is built using React Native. GitHub Link App Links iOS - Testflight - On Request Android - APK - On Request Streaming Refer to the page on FFMPEG - LINK Telemetry Phone Sensors react-native-geolocation-service We use this package to request for the device's latitude, longitude, and calculated speed. Sample code: import Geolocation from 'react-native-geolocation-service'; Geolocation.getCurrentPosition( (position) => { var positionCoords = position.coords; console.log(positionCoords); console.log(positionCoords.latitude); }, (error) => { console.log(error.code,error.message); } ) react-native-sensors (temporarily removed) Gives access to the phone's gyroscope and accelerometer OBD2REST Communicates to the Raspberry Pi Zero W to access the OBD-II data Components components/layoutStuff.js This component defines a section divider with optional header support. The header can be supplied by passing a title attribute. Example: <Section title=\"Useless Padding\" /> Helper Functions Toast Message import Toast from 'react-native-toast-message'; const toastMessage = (title,message,type=\"success\") => { Toast.show({ type: type, position: \"top\", text1: title, text2: message }) } toastMessage(\"Toast Title\",\"Toast Message\") Permissions Refer to react-native-permissions","title":"Mobile App"},{"location":"telemtry_and_streaming/mobile-app/#mobile-app","text":"The app is built using React Native. GitHub Link App Links iOS - Testflight - On Request Android - APK - On Request","title":"Mobile App"},{"location":"telemtry_and_streaming/mobile-app/#streaming","text":"Refer to the page on FFMPEG - LINK","title":"Streaming"},{"location":"telemtry_and_streaming/mobile-app/#telemetry","text":"","title":"Telemetry"},{"location":"telemtry_and_streaming/mobile-app/#phone-sensors","text":"","title":"Phone Sensors"},{"location":"telemtry_and_streaming/mobile-app/#react-native-geolocation-service","text":"We use this package to request for the device's latitude, longitude, and calculated speed. Sample code: import Geolocation from 'react-native-geolocation-service'; Geolocation.getCurrentPosition( (position) => { var positionCoords = position.coords; console.log(positionCoords); console.log(positionCoords.latitude); }, (error) => { console.log(error.code,error.message); } )","title":"react-native-geolocation-service"},{"location":"telemtry_and_streaming/mobile-app/#react-native-sensors-temporarily-removed","text":"Gives access to the phone's gyroscope and accelerometer","title":"react-native-sensors (temporarily removed)"},{"location":"telemtry_and_streaming/mobile-app/#obd2rest","text":"Communicates to the Raspberry Pi Zero W to access the OBD-II data","title":"OBD2REST"},{"location":"telemtry_and_streaming/mobile-app/#components","text":"","title":"Components"},{"location":"telemtry_and_streaming/mobile-app/#componentslayoutstuffjs","text":"This component defines a section divider with optional header support. The header can be supplied by passing a title attribute. Example: <Section title=\"Useless Padding\" />","title":"components/layoutStuff.js"},{"location":"telemtry_and_streaming/mobile-app/#helper-functions","text":"","title":"Helper Functions"},{"location":"telemtry_and_streaming/mobile-app/#toast-message","text":"import Toast from 'react-native-toast-message'; const toastMessage = (title,message,type=\"success\") => { Toast.show({ type: type, position: \"top\", text1: title, text2: message }) } toastMessage(\"Toast Title\",\"Toast Message\")","title":"Toast Message"},{"location":"telemtry_and_streaming/mobile-app/#permissions","text":"Refer to react-native-permissions","title":"Permissions"},{"location":"telemtry_and_streaming/python-app/","text":"Python App This python program uses the typer module to create a command line interface.","title":"Python App"},{"location":"telemtry_and_streaming/python-app/#python-app","text":"This python program uses the typer module to create a command line interface.","title":"Python App"}]}